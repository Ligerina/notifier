package ru.liger.defi.notifier.facade;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import ru.liger.defi.notifier.model.PositionStep;
import ru.liger.defi.notifier.model.TriggerDto;
import ru.liger.defi.notifier.service.TriggerService;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Service
@AllArgsConstructor
public class TriggerFacade {

    Map<Long, PositionStep> userSteps = new ConcurrentHashMap<>();
    Map<Long, TriggerDto> userTriggers = new ConcurrentHashMap<>();

    private final TriggerService triggerService;

    public SendMessage startTriggerCreation(Long chatId, String callbackData) {
        // 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
        userSteps.put(chatId, PositionStep.POSITION_NAME);

        // 2. –°–æ–∑–¥–∞—ë–º –∑–∞–≥–æ—Ç–æ–≤–∫—É –æ–±—ä–µ–∫—Ç–∞ TriggerDto
        TriggerDto dto = new TriggerDto();
        userTriggers.put(chatId, dto);

        // 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üÜï –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞.\n–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏*:");
        message.setParseMode("Markdown");

        return message;
    }


    public SendMessage processTriggerCreation(Long chatId, String input) {
        PositionStep step = userSteps.get(chatId);
        TriggerDto dto = userTriggers.get(chatId);

        String responseText;

        try {
            switch (step) {
                case POSITION_NAME -> {
                    dto.setPositionName(input);
                    userSteps.put(chatId, PositionStep.ASSET_NAME);
                    responseText = "–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞* (`BTC` –∏–ª–∏ `ETH`):";
                }
                case ASSET_NAME -> {
                    String asset = input.trim().toUpperCase();
                    if (!asset.equals("BTC") && !asset.equals("ETH")) {
                        responseText = "‚ùå –í–≤–µ–¥–∏—Ç–µ *—Ç–æ–ª—å–∫–æ* `BTC` –∏–ª–∏ `ETH`.";
                        break;
                    }
                    dto.setAssetName(asset);
                    userSteps.put(chatId, PositionStep.UPPER_BOUND);
                    responseText = "–í–≤–µ–¥–∏—Ç–µ *–≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É* (—á–∏—Å–ª–æ):";
                }
                case UPPER_BOUND -> {
                    dto.setUpperBound(new BigDecimal(input));
                    userSteps.put(chatId, PositionStep.LOWER_BOUND);
                    responseText = "–í–≤–µ–¥–∏—Ç–µ *–Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É* (—á–∏—Å–ª–æ):";
                }
                case LOWER_BOUND -> {
                    dto.setLowerBound(new BigDecimal(input));
                    triggerService.saveTrigger(chatId, dto);
                    responseText = "‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!";
                    userSteps.remove(chatId);
                    userTriggers.remove(chatId);
                }
                default -> responseText = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥.";
            }
        } catch (NumberFormatException e) {
            responseText = "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.";
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(responseText);
        message.setParseMode("Markdown");
        return message;
    }

    public boolean userAddingTrigger(Long chatId) {
        return userSteps.containsKey(chatId);
    }

    public SendMessage getAllTriggersByChatId(Long chatId) {
        var triggers = triggerService.getAllTriggers(chatId);

        String text;
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        if (triggers.isEmpty()) {
            text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.";
        } else {
            StringBuilder sb = new StringBuilder("üìå *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:*\n\n");

            int index = 1;
            for (TriggerDto trigger : triggers) {
                sb.append(index).append(". ")
                        .append("*").append(trigger.getPositionName()).append("* ‚Äî ")
                        .append(trigger.getAssetName()).append("\n")
                        .append("üîº –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: ").append(trigger.getUpperBound()).append("\n")
                        .append("üîΩ –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: ").append(trigger.getLowerBound()).append("\n\n");

                // üóë –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
                InlineKeyboardButton deleteButton = new InlineKeyboardButton();
                deleteButton.setText("üóë –£–¥–∞–ª–∏—Ç—å " + index);
                deleteButton.setCallbackData("DELETE_TRIGGER_" + trigger.getId());

                keyboard.add(List.of(deleteButton));
                index++;
            }

            text = sb.toString();
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("Markdown");

        if (!keyboard.isEmpty()) {
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            markup.setKeyboard(keyboard);
            message.setReplyMarkup(markup);
        }

        return message;
    }


    public void deleteTriggerById(UUID triggerId) {
        triggerService.deleteTriggerById(triggerId);
    }
}