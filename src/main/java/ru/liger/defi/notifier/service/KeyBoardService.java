package ru.liger.defi.notifier.service;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.lang.management.ManagementFactory;
import java.net.InetAddress;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
@AllArgsConstructor
public class KeyBoardService {

    public SendMessage createMainMenu(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());

        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ "–≤–∏–∑—É–∞–ª—å–Ω–æ", –¥–æ–±–∞–≤–∏–≤ –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ Markdown (–∫—É—Ä—Å–∏–≤, –∂–∏—Ä–Ω—ã–π –∏ —Ç.–¥.)
        message.setText("*–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ*");
        message.setParseMode("Markdown"); // –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

        // –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–∫–∞–∂–¥–∞—è –≤ —Å–≤–æ—ë–º List)
        InlineKeyboardButton viewTriggersButton = new InlineKeyboardButton();
        viewTriggersButton.setText("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∏–≥–µ—Ä–æ–≤");
        viewTriggersButton.setCallbackData("VIEW_TRIGGERS");

        InlineKeyboardButton addTriggerButton = new InlineKeyboardButton();
        addTriggerButton.setText("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–µ—Ä");
        addTriggerButton.setCallbackData("ADD_TRIGGER");

        // –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(viewTriggersButton);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(addTriggerButton);

        rows.add(row1);
        rows.add(row2);

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        keyboardMarkup.setKeyboard(rows);

        message.setReplyMarkup(keyboardMarkup);

        return message;
    }

    public SendMessage createAppInfoMessage(Long chatId) {
        String javaVersion = System.getProperty("java.version");
        String osName = System.getProperty("os.name");
        String osArch = System.getProperty("os.arch");

        Runtime runtime = Runtime.getRuntime();
        long usedMemory = (runtime.totalMemory() - runtime.freeMemory()) / (1024 * 1024);
        long maxMemory = runtime.maxMemory() / (1024 * 1024);
        int cpuCores = runtime.availableProcessors();

        long uptimeMillis = ManagementFactory.getRuntimeMXBean().getUptime();
        Duration uptime = Duration.ofMillis(uptimeMillis);
        String formattedUptime = formatDuration(uptime);

        String containerId = Optional.ofNullable(System.getenv("HOSTNAME")).orElse("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");

        String ip = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        try {
            InetAddress address = InetAddress.getLocalHost();
            ip = address.getHostAddress();
        } catch (Exception ignored) {
        }

        String text = """
                üñ• *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:*

                üß© Java: %s
                üñ• OS: %s %s
                üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ID: `%s`
                üìÖ –ê–ø—Ç–∞–π–º: %s
                üíæ –ü–∞–º—è—Ç—å: %d MB / %d MB
                üß† CPU: %d —è–¥–µ—Ä
                üåê IP: %s
                """.formatted(
                javaVersion, osName, osArch,
                containerId,
                formattedUptime,
                usedMemory, maxMemory,
                cpuCores,
                ip
        );

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("Markdown");

        return message;
    }

    private static String formatDuration(Duration d) {
        long hours = d.toHours();
        long minutes = d.toMinutesPart();
        long seconds = d.toSecondsPart();
        return "%d —á %d –º–∏–Ω %d —Å–µ–∫".formatted(hours, minutes, seconds);
    }


}
